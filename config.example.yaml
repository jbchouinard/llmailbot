# Appropriate API keys must be set as environment variables for LLM providers
# for the configured models
# e.g. OPENAI_API_KEY, ANTHROPIC_API_KEY, etc.
# The corresponding langchain provider packages must also be installed, e.g.
# pip install langchain-openai langchain-anthropic
# See https://python.langchain.com/docs/integrations/providers/
MailBots:
  # Each bot must have a unique email address (names can be repeated)
  # The bot will only respond to emails sent to its exact address
  # If you can receive emails for multiple addresses in the same account,
  # you can configure multiple bots in the same config file.
  - Name: MyChatGPT
    Address: chatgpt@example.com
    ChatModelConfig:
      model: gpt-4.5-preview
      model_provider: openai
      max_tokens: 2048
      temperature: 0.2
    MaxInputLength: 10000
    # The prompt supports the substitution of variables: name, bot_email and user_email
    SystemPrompt: |-
      Your name is {name}. You are a helpful assistant.
      A user is communicating with you using email.
      Your email address is {bot_email}. The user's email address is {user_email}. 
      You must compose a reply. Your reply must be in text/plain format.
      Your reply must not include email headers such as To, From and Subject.
      Email conversations are usually ordered from newest to oldest message.
      This is the email conversation:

  - Name: MyFlexibleAI
    # You can use a Python regex to match email addresses, and extract model parameters from the address.
    # This is simplest to do if you have a catch-all set up for a subdomain.
    # For example, the regex:
    AddressRegex: "model=(?P<model>[.0-9a-z-]+)(&provider=(?P<model_provider>[.0-9a-z-]+))?(&temperature=(?P<temperature>[0-9]+(\\.[0-9]+)?))?@ai\\.example\\.com"
    # Matches addresses like:
    #    model=claude-3-7-sonnet-latest@ai.example.com
    #    model=gpt-4o&provider=openai&temperature=0.2@ai.example.com
    #
    # (Some forms may not accept email addresses with characters like & or = but they are in fact valid.)
    #
    # If you don't have a catch-all, + addressing (supported by Gmail, Fastmail, maybe others?) can do the trick.
    # E.g. if you own youraccount@gmail.com, you can use this regex:
    # AddressRegex: "youraccount+(?P<model>[.0-9a-z-]+)@gmail.com"
    # To choose a model using the address, like youraccount+gpt-4.5-preview@gmail.com
    ChatModelConfig:
      max_tokens: 2048
      temperature: 0.2
    MaxInputLength: 10000
    SystemPrompt: ...

MailFetch:
  Mode: MarkRead
  # Mode: Delete
  # Beware: switching to Delete after running in MarkRead mode will cause
  # already read emails to be re-processed and deleted
  # If you want to switch, manually delete existing emails in the account first
  MaxAgeDays: 0 # Ignore e-mails older than this, e.g. 0=today only, 1=yesterday, etc.
  Interval: 300 # Interval in seconds to fetch emails
  BatchSize: 20 # Max number of e-mails to fetch at a time
  IMAP:
    Username: myaccount@example.com
    Password: my-secret-password
    Server: imap.example.com
    Port: 993
    # Encryption: STARTTLS or SSL/TLS or NONE # by default, guess based on port

MailSend:
  SMTP:
    Username: myaccount@example.com
    Password: my-secret-password
    Server: smtp.example.com
    Port: 465
    # Encryption: STARTTLS or SSL/TLS or NONE # by default, guess based on port

Security:
  RateLimit: # Global rate limit for replying to emails
    Limit: 100
    Window: 1 day
  RateLimitPerSender: # Rate limit per sender (based on To: header, which can be spoofed)
    Limit: 10
    Window: 1 hour
  FilterFrom: # Block or allow only specific emails or domains (based on To: header, which can be spoofed)
    Mode: AllowList
    Addresses:
      - "myname@example.com" # exact e-mail address
      - "*@mydomain.net" # any e-mail from this domain

# Fields that can be dynamically configured in langchain chat models
# At a minimum, model and model_provider are required
ChatModelConfigurableFields:
  - model
  - model_provider
  - max_tokens
  - temperature

# Thread or process pool used for fetching and sending e-mail
# LLM generation does not use the pool, it is fully async
WorkerPool:
  # Type: Process # not recommended
  Type: Thread
  Count: 4

Queues:
  Parameters:
    maxsize: 100
