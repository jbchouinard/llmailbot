# WARNING: don't use your personal email account
# LLMailBot may delete all your emails if you use the Delete mode
# use a dedicated email account with nothing you care about in it
IMAP:
  # When fetching mail, the bot can either mark emails as read or delete them
  # Beware: the Delete mode doesn't care whether emails are read or not
  # So if you start in MarkRead mode then switch to Delete,
  # already-processed emails may get new replies (and get deleted)
  # Possible values for OnFetch: MarkRead, Delete
  OnFetch: MarkRead
  FetchMaxAgeDays: 0 # Ignore e-mails older than this, e.g. 0=today only, 1=since yesterday, etc.
  FetchInterval: 300 # Run IMAP fetch at this interval (in seconds)
  FetchMax: 20 # Max number of e-mails to fetch per interval
  Username: mybot@example.com
  Password: my-secret-password
  Server: imap.example.com
  Port: 993
  # Possible values for Encryption: STARTTLS, SSL/TLS, NONE
  # By default, guess based on port number
  # Encryption:

SMTP:
  Username: mybot@example.com
  Password: my-secret-password
  Server: smtp.example.com
  Port: 465
  # Possible values for Encryption: STARTTLS, SSL/TLS, NONE
  # By default, guess based on port number
  # Encryption:

# Each model config should have a unique email address (names can be repeated)
# Emails that don't match any configured address will be ignored
#
# If you can receive emails for multiple addresses in the same account,
# you can configure multiple models here
#
# Many mail services support + addressing (Gmail, Fastmail, Yahoo, Outlook, ...)
# If example.com supports + addressing and you own mycoolbot@example.com
# you could configure different models with addresses:
#  - mycoolbot+gpt@example.com
#  - mycoolbot+claude@example.com
#  etc.
Models:
  - Address: mybot@example.com
    Name: MyChatBot
    MaxInputLength: 10000
    ChatModelConfig:
      Model: gpt-4.5-preview
      ModelProvider: openai
      MaxTokens: 2048
      Temperature: 0.2
    # The prompt supports the substitution of variables: name, bot_email and user_email
    SystemPrompt: |-
      Your name is {name}. You are a helpful assistant.
      A user is communicating with you using email.
      Your email address is {bot_email}. The user's email address is {user_email}. 
      You must compose a reply. Your reply must be in text/plain format.
      Your reply must not include email headers such as To, From and Subject.
      Messages in an email conversation are often ordered from newest to oldest.
      This is the email conversation you must respond to:

    # Advanced feature: regex addresses
    # Instead of Address, AddressRegex can be specified. It must be a valid Python regex
    # The bot will respond to any email address that matches the regex
    # For example, to respond to any email address in the mybot.example.com domain:
    #
    # AddressRegex: ".*@mybot\\.example\\.com"
    #
    # There is no raw string in yaml so double-escaping regex is necessary, e.g.
    # a literal . is \\.
    # a literal backslash is \\\\
    #
    # Named capture groups can be used to dynamically set parts of
    # the chat model config, for example you select different models
    # based on the address:
    #
    # AddressRegex: "mybot\\+(?P<model>[.0-9a-z-]+)@example\\.com"
    #
    # Then write to mybot+gpt-4o@example.com, mybot+claude-3-5-sonnet-latest@example.com, etc.

# This is passed to langchain, it determines which model parameters
# can be changed dynamically. Any parameter that you wish to set
# in a ChatModelConfig block or with regex capture groups must be listed here.
# Model and ModelProvider are necessary for llmailbot to function
# (Both snake_case and CamelCase works)
ChatModelConfigurableFields:
  - Model
  - ModelProvider
  - MaxTokens
  - Temperature

Security:
  # Global rate limit applied to all incoming emails
  # Default: 100/day
  RateLimit:
    Limit: 100
    Window: 1 day

  # Rate limit per sender or domain (based on From header, which can be spoofed - see README)
  # Default: no limit
  # RateLimitPerDomain:
  #   Limit: 10
  #   Window: 1 hour
  # RateLimitPerSender:
  #   Limit: 10
  #   Window: 1 hour

  # Allow/Block address lists (based on From header, which can be spoofed - see README)
  # You probably dont want random people accessing your bot and using up your LLM credits
  # If you're absolutely sure you want to let anyone use your bot,
  # set AllowFrom: [], and AllowAllAddressesIReallyDontMindSpendingAllMyCredits: true
  # Default: empty list (block all emails)
  AllowFrom:
    - "you@example.com" # exact e-mail address
    - "*@example.com" # any e-mail from this domain
  BlockFrom: []

  # Experimental features for blocking spoofed emails (see README)
  # Your mail provider *should* be doing much more robust checks than this already
  # Possible values are:
  #  Always: always verify, block if the relevant header is missing
  #  IfPresent: verify only if the relevant headers are present
  #  Never: verification disabled
  # VerifyDKIM: Never  # verify DKIM signatures
  # VerifyMailFrom: Never  # try to verify that SMTP MAIL FROM matches From exactly (based on Authentication-Results)
  # VerifyXMailFrom: Never  # verify that X-Mail-From matches From exactly (X-Mail-From is a custom header used by Fastmail, maybe others?)
#
# Thread or process pool used for fetching and sending e-mail
# LLM generation uses asyncio, not the worker pool
WorkerPool:
  # Possible values: Thread, Process (Thread is recommended)
  Type: Thread
  Count: 4
#
# Settings for the incoming and outgoing mail queues
# For now its just in-memory queues, might add Redis later
Queues:
  Parameters:
    maxsize: 100
